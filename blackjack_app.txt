#models.py
from django.db import models
import random

class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit

    def __str__(self):
        return f"{self.rank}{self.suit}"

class BlackjackGame(models.Model):
    player_hand = models.JSONField(default=list)
    dealer_hand = models.JSONField(default=list)
    deck = models.JSONField(default=list)
    game_over = models.BooleanField(default=False)

    def create_deck(self):
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        suits = ['♠', '♥', '♣', '♦']
        deck = [{'rank': rank, 'suit': suit} for suit in suits for rank in ranks]
        random.shuffle(deck)
        return deck

    def deal_card(self):
        return self.deck.pop()

    def card_value(self, card):
        if card['rank'] in ['J', 'Q', 'K']:
            return 10
        elif card['rank'] == 'A':
            return 11
        else:
            return int(card['rank'])

    def calculate_hand(self, hand):
        total = sum(self.card_value(card) for card in hand)
        aces = sum(1 for card in hand if card['rank'] == 'A')
        while total > 21 and aces:
            total -= 10
            aces -= 1
        return total

    def start_game(self):
        self.deck = self.create_deck()
        self.player_hand = [self.deal_card(), self.deal_card()]
        self.dealer_hand = [self.deal_card(), self.deal_card()]
        self.game_over = False
        self.save()

    def player_hit(self):
        self.player_hand.append(self.deal_card())
        if self.calculate_hand(self.player_hand) > 21:
            self.game_over = True
            self.save()
            return "Bust! You lose."
        self.save()
        return None

    def dealer_play(self):
        while self.calculate_hand(self.dealer_hand) < 17:
            self.dealer_hand.append(self.deal_card())

        player_score = self.calculate_hand(self.player_hand)
        dealer_score = self.calculate_hand(self.dealer_hand)

        self.game_over = True
        self.save()

        if dealer_score > 21:
            return "Dealer busts! You win!"
        elif dealer_score > player_score:
            return "Dealer wins!"
        elif dealer_score < player_score:
            return "You win!"
        else:
            return "It's a tie!"

#views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from casino_main.models import Profile
from .game_logic import BlackjackGame, Card
import json


@login_required
def game(request):
    profile, created = Profile.objects.get_or_create(user=request.user)

    if request.GET.get('new_game'):
        request.session['game'] = None
        request.session['bet'] = 0

    game_state = request.session.get('game')
    if not game_state:
        game = BlackjackGame()
        game.create_deck()
        game.dealer_hand = [game.deal_card()]
        request.session['game'] = game.get_game_state()
    else:
        game = BlackjackGame()
        game.player_hand = [Card(**card) for card in game_state['player_hand']]
        game.dealer_hand = [Card(**card) for card in game_state['dealer_hand']]
        game.game_over = game_state['game_over']

    context = {
        'game_state': request.session['game'],
        'balance': profile.balance,
        'bet': request.session.get('bet', 0),
    }
    return render(request, 'blackjack_app/game.html', context)


@login_required
def start_game(request):
    profile, created = Profile.objects.get_or_create(user=request.user)
    game = BlackjackGame()
    game_state = request.session['game']
    game.dealer_hand = [Card(**card) for card in game_state['dealer_hand']]
    game.dealer_hand.append(game.deal_card())
    game.player_hand = [game.deal_card(), game.deal_card()]
    request.session['game'] = game.get_game_state()

    return JsonResponse({
        'game_state': request.session['game'],
        'balance': profile.balance,
        'bet': request.session.get('bet', 0),
    })


@login_required
def hit(request):
    profile, created = Profile.objects.get_or_create(user=request.user)
    game = BlackjackGame()
    game_state = request.session['game']
    game.player_hand = [Card(**card) for card in game_state['player_hand']]
    game.dealer_hand = [Card(**card) for card in game_state['dealer_hand']]
    game.game_over = game_state['game_over']

    result = game.player_hit()
    request.session['game'] = game.get_game_state()

    if result == "Bust! You lose.":
        bet = request.session.get('bet', 0)
        profile.balance -= bet
        profile.save()
        request.session['bet'] = 0

    return JsonResponse({
        'game_state': request.session['game'],
        'balance': profile.balance,
        'bet': request.session.get('bet', 0),
        'message': result,
    })


@login_required
def stay(request):
    profile, created = Profile.objects.get_or_create(user=request.user)
    game = BlackjackGame()
    game_state = request.session['game']
    game.player_hand = [Card(**card) for card in game_state['player_hand']]
    game.dealer_hand = [Card(**card) for card in game_state['dealer_hand']]

    result = game.dealer_play()
    request.session['game'] = game.get_game_state()

    bet = request.session.get('bet', 0)
    if "You win" in result:
        profile.balance += bet * 2
    elif "Dealer wins" in result:
        profile.balance -= bet
    else:
        pass

    profile.save()
    request.session['bet'] = 0

    return JsonResponse({
        'game_state': request.session['game'],
        'balance': profile.balance,
        'bet': request.session['bet'],
        'message': result,
    })


@login_required
def place_bet(request):
    profile, created = Profile.objects.get_or_create(user=request.user)
    amount = int(request.GET.get('amount', 0))
    current_bet = request.session.get('bet', 0)

    if amount == 0:
        profile.balance += current_bet
        request.session['bet'] = 0
    elif profile.balance >= amount:
        request.session['bet'] = request.session.get('bet', 0) + amount

    profile.save()

    return JsonResponse({
        'balance': profile.balance,
        'bet': request.session['bet'],
        'game_state': request.session['game'],
    })


#game_logic.py

import random

class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit

    def __str__(self):
        return f"{self.rank}{self.suit}"

    def to_dict(self):
        return {'rank': self.rank, 'suit': self.suit}

class BlackjackGame:
    def __init__(self):
        self.player_hand = []
        self.dealer_hand = []
        self.deck = []
        self.game_over = False

    def create_deck(self):
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        suits = ['♠', '♥', '♣', '♦']
        self.deck = [Card(rank, suit) for suit in suits for rank in ranks]
        random.shuffle(self.deck)

    def deal_card(self):
        if not self.deck:
            self.create_deck()  # Reshuffle when the deck is empty
        return self.deck.pop()

    def card_value(self, card):
        if card.rank in ['J', 'Q', 'K']:
            return 10
        elif card.rank == 'A':
            return 11
        else:
            return int(card.rank)

    def calculate_hand(self, hand):
        total = sum(self.card_value(card) for card in hand)
        aces = sum(1 for card in hand if card.rank == 'A')
        while total > 21 and aces:
            total -= 10
            aces -= 1
        return total

    def start_game(self):
        self.create_deck()
        self.player_hand = [self.deal_card(), self.deal_card()]
        self.dealer_hand = [self.deal_card(), self.deal_card()]
        self.game_over = False

    def player_hit(self):
        self.player_hand.append(self.deal_card())
        if self.calculate_hand(self.player_hand) > 21:
            self.game_over = True
            return "Bust! You lose."
        return None

    def dealer_play(self):
        while self.calculate_hand(self.dealer_hand) < 17:
            self.dealer_hand.append(self.deal_card())

        player_score = self.calculate_hand(self.player_hand)
        dealer_score = self.calculate_hand(self.dealer_hand)

        self.game_over = True

        if dealer_score > 21:
            return "Dealer busts! You win!"
        elif dealer_score > player_score:
            return "Dealer wins!"
        elif dealer_score < player_score:
            return "You win!"
        else:
            return "It's a tie!"

    def get_game_state(self):
        return {
            'player_hand': [card.to_dict() for card in self.player_hand],
            'dealer_hand': [card.to_dict() for card in self.dealer_hand],
            'player_score': self.calculate_hand(self.player_hand),
            'dealer_score': self.calculate_hand([self.dealer_hand[0]]),
            'game_over': self.game_over,
        }

#game.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blackjack Game</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #006400;
            --accent-color: #a62424;
            --text-color: #ffffff;
            --card-bg: #ffffff;
            --button-bg: #a62424;
            --button-hover: #8a1c1c;
            --chip-colors: #ff5252, #ffeb3b, #2196f3, #4caf50, #9c27b0;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Arial', sans-serif;
            background-color: var(--primary-color);
            color: var(--text-color);
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            min-height: calc(100vh - 40px);
        }

        .game-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            flex-wrap: wrap;
            gap: 15px;
        }

        .balance-container {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 10px 15px;
            font-size: 18px;
            display: flex;
            align-items: center;
        }

        .balance-amount {
            font-weight: bold;
            margin-left: 10px;
        }

        .game-title {
            font-size: 32px;
            text-align: center;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .game-board {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .dealer-area, .player-area {
            min-height: 200px;
            padding: 20px;
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.2);
            margin-bottom: 20px;
        }

        .area-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            padding-bottom: 5px;
        }

        .cards-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            min-height: 150px;
        }

        .card {
            width: 100px;
            height: 150px;
            background-color: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            padding: 10px;
            position: relative;
            color: #000;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card.red {
            color: var(--accent-color);
        }

        .card-top, .card-bottom {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }

        .card-bottom {
            align-items: flex-end;
            transform: rotate(180deg);
        }

        .card-value {
            font-size: 20px;
            font-weight: bold;
        }

        .card-suit {
            font-size: 20px;
        }

        .card-center {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 40px;
        }

        .hidden-card {
            background-image: linear-gradient(135deg, #b71c1c 25%, #e53935 25%, #e53935 50%, #b71c1c 50%, #b71c1c 75%, #e53935 75%, #e53935 100%);
            background-size: 20px 20px;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 12px 25px;
            font-size: 16px;
            border: none;
            border-radius: 50px;
            background-color: var(--button-bg);
            color: var(--text-color);
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 120px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        }

        .btn:hover {
            background-color: var(--button-hover);
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
        }

        .btn:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .btn:disabled {
            background-color: #666;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background-color: #424242;
        }

        .btn-secondary:hover {
            background-color: #333;
        }

        .betting-area {
            display: flex;
            flex-direction: column;
            align-items: center;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            padding: 20px;
        }

        .chips-container {
            display: flex;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }

        .chip {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
            border: 3px dashed rgba(255, 255, 255, 0.5);
            transition: all 0.3s ease;
            position: relative;
        }

        .chip:hover {
            transform: scale(1.1);
        }

        .chip:active {
            transform: scale(0.95);
        }

        .chip:before {
            content: '';
            position: absolute;
            top: 8px;
            left: 8px;
            right: 8px;
            bottom: 8px;
            border: 2px dashed rgba(255, 255, 255, 0.3);
            border-radius: 50%;
        }

        .chip5 { background-color: #ff5252; }
        .chip10 { background-color: #2196f3; }
        .chip25 { background-color: #4caf50; }
        .chip50 { background-color: #ffeb3b; color: #333; }
        .chip100 { background-color: #9c27b0; }

        .current-bet {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            padding: 10px 15px;
            font-size: 18px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }

        .current-bet-amount {
            font-weight: bold;
            margin-left: 10px;
        }

        .message-area {
            background: rgba(0, 0, 0, 0.5);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            font-size: 22px;
            font-weight: bold;
            margin-bottom: 20px;
            min-height: 60px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        @media (max-width: 768px) {
            .game-header {
                flex-direction: column;
                align-items: center;
            }

            .card {
                width: 80px;
                height: 120px;
            }

            .card-value, .card-suit {
                font-size: 16px;
            }

            .card-center {
                font-size: 30px;
            }

            .controls {
                flex-direction: column;
                align-items: center;
            }

            .btn {
                width: 100%;
                max-width: 300px;
            }

            .chips-container {
                gap: 5px;
            }

            .chip {
                width: 50px;
                height: 50px;
                font-size: 14px;
            }
        }

        @media (max-width: 480px) {
            .card {
                width: 60px;
                height: 90px;
                padding: 5px;
            }

            .card-value, .card-suit {
                font-size: 14px;
            }

            .card-center {
                font-size: 24px;
            }

            .chip {
                width: 40px;
                height: 40px;
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="game-header">
            <div class="balance-container">
                <span>Balance:</span>
                <span class="balance-amount" id="playerBalance">$ {{ balance }}</span>
            </div>
            <h1 class="game-title">BLACKJACK</h1>
            <a href="?new_game=true" class="btn">New Game</a>
        </div>

        <div class="message-area" id="messageArea">
            {% if game_state.game_over %}
                Game over! Start a new round.
            {% else %}
                Place your bet and start the game.
            {% endif %}
        </div>

        <div class="game-board">
            <div class="dealer-area">
                <div class="area-header">
                    <h2>Dealer's Hand</h2>
                    <span class="score" id="dealerScore">
                        {% if game_state.game_over %}
                            Score: {{ game_state.dealer_score }}
                        {% else %}
                            Score: {{ game_state.dealer_score }}
                        {% endif %}
                    </span>
                </div>
                <div class="cards-container" id="dealerCards">
                    {% for card in game_state.dealer_hand %}
                        {% if forloop.last and not game_state.game_over %}
                            <div class="card hidden-card">
                                <!-- Hidden card -->
                            </div>
                        {% else %}
                            <div class="card {% if card.suit == '♥' or card.suit == '♦' %}red{% endif %}">
                                <div class="card-top">
                                    <span class="card-value">{{ card.rank }}</span>
                                    <span class="card-suit">{{ card.suit }}</span>
                                </div>
                                <div class="card-center">{{ card.suit }}</div>
                                <div class="card-bottom">
                                    <span class="card-value">{{ card.rank }}</span>
                                    <span class="card-suit">{{ card.suit }}</span>
                                </div>
                            </div>
                        {% endif %}
                    {% endfor %}
                </div>
            </div>

            <div class="player-area">
                <div class="area-header">
                    <h2>Your Hand</h2>
                    <span class="score" id="playerScore">
                        Score: {{ game_state.player_score }}
                    </span>
                </div>
                <div class="cards-container" id="playerCards">
                    {% for card in game_state.player_hand %}
                        <div class="card {% if card.suit == '♥' or card.suit == '♦' %}red{% endif %}">
                            <div class="card-top">
                                <span class="card-value">{{ card.rank }}</span>
                                <span class="card-suit">{{ card.suit }}</span>
                            </div>
                            <div class="card-center">{{ card.suit }}</div>
                            <div class="card-bottom">
                                <span class="card-value">{{ card.rank }}</span>
                                <span class="card-suit">{{ card.suit }}</span>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <div class="betting-area">
            <div class="current-bet">
                <span>Current Bet:</span>
                <span class="current-bet-amount" id="currentBet">$ {{ bet }}</span>
            </div>

            <div class="chips-container">
                <div class="chip chip5" data-value="5">$5</div>
                <div class="chip chip10" data-value="10">$10</div>
                <div class="chip chip25" data-value="25">$25</div>
                <div class="chip chip50" data-value="50">$50</div>
                <div class="chip chip100" data-value="100">$100</div>
            </div>

            <div class="controls">
                <button id="clearBetBtn" class="btn btn-secondary">Clear Bet</button>
                <button id="startGameBtn" class="btn" {% if bet == 0 %}disabled{% endif %}>Deal Cards</button>
                <button id="hitBtn" class="btn" {% if not game_state.player_hand or game_state.game_over or bet == 0 %}disabled{% endif %}>Hit</button>
                <button id="stayBtn" class="btn" {% if not game_state.player_hand or game_state.game_over or bet == 0 %}disabled{% endif %}>Stay</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const messageArea = document.getElementById('messageArea');
            const dealerCards = document.getElementById('dealerCards');
            const playerCards = document.getElementById('playerCards');
            const playerScore = document.getElementById('playerScore');
            const dealerScore = document.getElementById('dealerScore');
            const playerBalance = document.getElementById('playerBalance');
            const currentBet = document.getElementById('currentBet');

            const hitBtn = document.getElementById('hitBtn');
            const stayBtn = document.getElementById('stayBtn');
            const startGameBtn = document.getElementById('startGameBtn');
            const clearBetBtn = document.getElementById('clearBetBtn');
            const chips = document.querySelectorAll('.chip');

            let gameInProgress = {{ game_state.player_hand|length }} > 0 && !{{ game_state.game_over|lower }};

            function renderCard(card, isRed = false) {
                return `
                    <div class="card ${isRed ? 'red' : ''}">
                        <div class="card-top">
                            <span class="card-value">${card.rank}</span>
                            <span class="card-suit">${card.suit}</span>
                        </div>
                        <div class="card-center">${card.suit}</div>
                        <div class="card-bottom">
                            <span class="card-value">${card.rank}</span>
                            <span class="card-suit">${card.suit}</span>
                        </div>
                    </div>
                `;
            }

            function renderHiddenCard() {
                return `
                    <div class="card hidden-card">
                        <!-- Hidden card -->
                    </div>
                `;
            }

            function updateUI(data) {
                // Update scores and balance
                playerScore.textContent = `Score: ${data.game_state.player_score}`;
                playerBalance.textContent = `$ ${data.balance}`;
                currentBet.textContent = `$ ${data.bet}`;

                // Update dealer score based on game state
                if (data.game_state.game_over) {
                    // If game is over, show actual dealer score
                    let totalScore = 0;
                    data.game_state.dealer_hand.forEach(card => {
                        totalScore += cardValue(card);
                    });
                    dealerScore.textContent = `Score: ${totalScore}`;
                } else {
                    // If game is ongoing, show only the score of the first card
                    dealerScore.textContent = `Score: ${data.game_state.dealer_score}`;
                }

                // Clear card displays
                dealerCards.innerHTML = '';
                playerCards.innerHTML = '';

                // Render dealer cards
                data.game_state.dealer_hand.forEach((card, index) => {
                    const isLastCard = index === data.game_state.dealer_hand.length - 1;
                    const shouldHide = isLastCard && !data.game_state.game_over;

                    if (shouldHide) {
                        dealerCards.innerHTML += renderHiddenCard();
                    } else {
                        const isRed = card.suit === '♥' || card.suit === '♦';
                        dealerCards.innerHTML += renderCard(card, isRed);
                    }
                });

                // Render player cards
                data.game_state.player_hand.forEach(card => {
                    const isRed = card.suit === '♥' || card.suit === '♦';
                    playerCards.innerHTML += renderCard(card, isRed);
                });

                // Update button states
                const hasCards = data.game_state.player_hand.length > 0;
                const gameOver = data.game_state.game_over;
                const hasBet = data.bet > 0;

                hitBtn.disabled = !hasCards || gameOver || !hasBet;
                stayBtn.disabled = !hasCards || gameOver || !hasBet;
                startGameBtn.disabled = !hasBet || (hasCards && !gameOver);

                // Display message if provided
                if (data.message) {
                    messageArea.textContent = data.message;
                } else if (gameOver) {
                    messageArea.textContent = 'Game over! Place a bet to play again.';
                } else if (!hasCards) {
                    messageArea.textContent = 'Place your bet and start the game.';
                } else {
                    messageArea.textContent = 'Your move!';
                }

                // Update game state
                gameInProgress = hasCards && !gameOver;
            }

            function cardValue(card) {
                if (['J', 'Q', 'K'].includes(card.rank)) {
                    return 10;
                } else if (card.rank === 'A') {
                    return 11; // Simplified for UI purposes
                } else {
                    return parseInt(card.rank);
                }
            }

            // Chip click handler
            chips.forEach(chip => {
                chip.addEventListener('click', function() {
                    if (gameInProgress) return;

                    const amount = parseInt(this.dataset.value);

                    fetch(`{% url 'blackjack_app:place_bet' %}?amount=${amount}`)
                        .then(response => response.json())
                        .then(data => {
                            updateUI(data);
                        })
                        .catch(error => console.error('Error:', error));
                });
            });

            // Clear bet button
            clearBetBtn.addEventListener('click', function() {
                if (gameInProgress) return;

                fetch("{% url 'blackjack_app:place_bet' %}?amount=0")
                    .then(response => response.json())
                    .then(data => {
                        updateUI(data);
                    })
                    .catch(error => console.error('Error:', error));
            });

            // Start game button
            startGameBtn.addEventListener('click', function() {
                if (gameInProgress) return;

                fetch("{% url 'blackjack_app:start_game' %}")
                    .then(response => response.json())
                    .then(data => {
                        updateUI(data);
                    })
                    .catch(error => console.error('Error:', error));
            });

            // Hit button
            hitBtn.addEventListener('click', function() {
                if (!gameInProgress) return;

                fetch("{% url 'blackjack_app:hit' %}")
                    .then(response => response.json())
                    .then(data => {
                        updateUI(data);
                    })
                    .catch(error => console.error('Error:', error));
            });

            // Stay button
            stayBtn.addEventListener('click', function() {
                if (!gameInProgress) return;

                fetch("{% url 'blackjack_app:stay' %}")
                    .then(response => response.json())
                    .then(data => {
                        updateUI(data);
                    })
                    .catch(error => console.error('Error:', error));
            });
        });
    </script>
</body>
</html>
